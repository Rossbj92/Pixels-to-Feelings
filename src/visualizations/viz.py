from collections import namedtuple
import numpy as np
import pandas as pd
from sklearn.metrics import confusion_matrix

import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import seaborn as sns

header_font = fm.FontProperties(fname='../src/visualizations/Fonts/Reem_Kufi/ReemKufi-Regular.ttf', size = 25)
text_font = fm.FontProperties(fname='../src/visualizations/Fonts/Source_Sans_Pro/SourceSansPro-Regular.ttf', size = 18)
legend_font = fm.FontProperties(fname='../src/visualizations/Fonts/Source_Sans_Pro/SourceSansPro-Regular.ttf', size = 16)

labels = ['Surprise', 'Fear', 'Love', 'Anger', 'Joy', 'Sadness']
y_true = np.array([4., 5., 5., 2., 5., 4., 4., 5., 5., 0., 4., 0., 5., 2., 4., 0., 2.,
       1., 5., 4., 5., 5., 4., 3., 5., 4., 2., 4., 4., 3., 0., 1., 0., 3.,
       4., 3., 3., 5., 4., 5., 4., 2., 5., 4., 3., 2., 2., 0., 2., 2., 3.,
       5., 5., 2., 4., 4., 2., 2., 5., 4., 2., 2., 5., 0., 3., 0., 2., 0.,
       5., 4., 0., 2., 4., 3., 2., 4., 3., 5., 5., 3., 4., 2., 4., 0., 3.,
       0., 2., 4., 0., 3., 5., 5., 2., 5., 0., 2., 2., 5., 3., 2., 0., 0.,
       2., 4., 5., 3., 2., 5., 4., 4., 4., 2., 0., 2., 4., 3., 2., 0., 1.,
       2., 5., 5., 5., 4., 5., 2., 3., 2., 5., 2., 5., 3., 1., 5., 3., 3.,
       4., 0., 4., 3., 2., 5., 3., 2., 0., 2., 0., 1., 2., 3., 4., 3., 0.,
       2., 5., 5., 5., 3., 5., 2., 2., 0., 3., 4., 3., 4., 1., 0., 3., 3.,
       1., 4., 2., 3., 3., 5., 2., 5., 3., 2., 5., 4., 3., 0., 2., 4., 2.,
       0., 4., 1., 2., 0., 5., 1., 0., 4., 4., 5., 4., 5., 5., 5., 2., 3.,
       3., 3., 4., 2., 0., 0., 4., 3., 2., 2., 5., 4., 3., 5., 5., 0., 5.,
       0., 4., 4., 2., 2., 3., 5., 3., 4., 2., 2., 3., 2., 5., 0., 2., 4.,
       5., 3., 3., 2., 5., 2., 4., 2., 5., 5., 0., 3., 0., 3., 2., 2., 3.,
       4., 5., 4., 3., 5., 4., 5., 3., 5., 2., 2., 3., 1., 4., 0., 5., 5.,
       2., 4., 1., 5., 4., 5., 5., 3., 3., 5., 0., 4., 0., 5., 4., 5., 3.,
       2., 2., 1., 2., 3., 5., 5., 5., 0., 5., 1., 0., 1., 5., 4., 0., 1.,
       2., 0., 0., 4., 2., 2., 5., 4., 3., 4., 4., 0., 4., 0., 2., 3., 2.,
       3., 2., 0., 2., 4., 5., 4., 2., 4., 2., 5., 4., 0., 4., 2., 2., 4.,
       0., 5., 0., 4., 2., 1., 4., 5., 2., 2., 4., 5., 4., 5., 4., 5., 4.,
       5., 3., 2., 4., 5., 0., 2., 2., 4., 1., 4., 2., 3., 5., 3., 1., 5.,
       2., 4., 4., 3., 2., 2., 5., 5., 2., 0., 0., 0., 4., 5., 5., 1., 5.,
       0., 0., 4., 5., 5., 5., 0., 0., 4., 4., 2., 1., 3., 4., 4., 5., 4.,
       4., 5., 5., 5., 3., 0., 4., 4., 0., 2., 5., 5., 0., 0., 5., 4., 3.,
       0., 1., 5., 2., 2., 5., 5., 5., 1., 3., 4., 2., 2., 5., 4., 5., 0.,
       3., 5., 0., 3., 5., 4., 5., 0., 4., 2., 5., 5., 5., 3., 5., 5., 4.,
       0., 2., 5., 5., 2., 2., 2., 3., 2., 2., 5., 0., 0., 0., 5., 1., 2.,
       2., 4., 1., 3., 0., 5., 2., 5., 1., 0., 5., 2., 1., 5., 2., 4., 5.,
       0., 0., 5., 1., 4., 5., 2., 1., 4., 1., 5., 4., 2., 5., 3., 0., 0.,
       0., 3., 3., 0., 5., 3., 5., 3., 4., 2., 5., 2., 0., 0., 2., 0., 4.,
       0., 5., 0., 2., 4., 3., 5., 0., 5., 4., 3., 2., 5., 2., 5., 4., 4.,
       2., 0., 5., 2., 1., 4., 4., 3., 4., 4., 0., 5., 4., 3., 3., 5., 0.,
       5., 5., 3., 5., 5., 4., 2., 2., 2., 2., 2., 4., 4., 3., 3., 3., 2.,
       5., 0., 2., 1., 2., 3., 2., 0., 2., 0., 3., 4., 0., 5., 2., 2., 5.,
       3., 0., 3., 5., 3., 5., 5., 2., 4., 5., 5., 5., 2., 5.])
y_pred_webemo = np.array([0., 5., 5., 2., 1., 4., 2., 5., 5., 0., 2., 0., 5., 3., 4., 0., 2.,
       1., 5., 4., 5., 5., 4., 1., 5., 0., 2., 4., 0., 3., 0., 1., 0., 3.,
       4., 3., 3., 5., 4., 5., 4., 2., 5., 4., 3., 4., 2., 4., 2., 2., 3.,
       5., 5., 2., 4., 4., 2., 2., 5., 4., 2., 2., 5., 4., 3., 1., 2., 0.,
       4., 4., 0., 1., 0., 3., 2., 4., 5., 5., 5., 3., 4., 2., 4., 4., 3.,
       0., 2., 0., 1., 5., 5., 2., 2., 5., 1., 3., 2., 5., 5., 2., 0., 0.,
       2., 4., 5., 3., 2., 5., 5., 1., 4., 2., 0., 2., 4., 5., 5., 0., 4.,
       1., 5., 5., 3., 4., 5., 2., 3., 2., 5., 2., 5., 3., 0., 2., 3., 3.,
       4., 0., 4., 2., 2., 5., 5., 2., 0., 2., 0., 1., 2., 3., 4., 3., 0.,
       2., 2., 5., 3., 3., 5., 2., 4., 5., 3., 4., 3., 2., 2., 0., 0., 3.,
       1., 4., 2., 3., 3., 2., 2., 5., 3., 2., 5., 2., 3., 2., 2., 4., 2.,
       0., 4., 0., 3., 0., 4., 1., 0., 3., 4., 3., 4., 3., 3., 1., 2., 3.,
       3., 3., 4., 3., 1., 0., 5., 3., 2., 2., 5., 4., 3., 5., 0., 4., 5.,
       0., 4., 4., 2., 2., 3., 5., 3., 4., 4., 3., 3., 2., 5., 0., 2., 4.,
       5., 3., 3., 5., 5., 2., 4., 2., 3., 5., 0., 3., 0., 3., 2., 2., 5.,
       4., 2., 4., 5., 5., 4., 1., 5., 2., 2., 5., 3., 1., 4., 4., 2., 5.,
       3., 4., 1., 0., 4., 1., 5., 5., 5., 5., 0., 2., 0., 5., 4., 5., 3.,
       2., 1., 1., 2., 3., 5., 2., 3., 0., 5., 1., 0., 1., 5., 4., 0., 0.,
       2., 0., 2., 4., 2., 2., 5., 4., 3., 4., 2., 4., 4., 4., 2., 3., 2.,
       1., 2., 0., 4., 4., 5., 4., 2., 4., 2., 5., 4., 0., 4., 3., 2., 4.,
       0., 5., 0., 4., 2., 0., 4., 5., 2., 2., 4., 3., 4., 5., 4., 5., 2.,
       5., 5., 2., 4., 5., 4., 3., 2., 1., 3., 0., 2., 3., 1., 3., 1., 5.,
       2., 4., 5., 5., 5., 2., 3., 5., 2., 0., 0., 0., 4., 2., 5., 4., 5.,
       4., 0., 0., 5., 5., 5., 0., 0., 2., 2., 2., 1., 5., 4., 4., 1., 4.,
       4., 5., 5., 3., 3., 0., 4., 0., 1., 2., 5., 5., 0., 1., 3., 4., 3.,
       4., 0., 5., 5., 2., 5., 5., 1., 1., 5., 2., 2., 2., 5., 4., 5., 0.,
       3., 5., 0., 5., 5., 4., 5., 0., 4., 2., 5., 1., 5., 5., 5., 5., 4.,
       4., 2., 5., 5., 2., 2., 1., 5., 2., 2., 5., 5., 1., 0., 5., 4., 2.,
       1., 4., 1., 3., 0., 5., 2., 3., 3., 0., 5., 2., 1., 5., 2., 4., 5.,
       2., 0., 5., 1., 4., 5., 2., 2., 4., 1., 4., 4., 4., 4., 3., 0., 0.,
       0., 3., 5., 0., 5., 3., 5., 3., 4., 3., 5., 2., 4., 0., 2., 1., 4.,
       0., 0., 0., 2., 2., 3., 5., 1., 1., 0., 5., 2., 5., 2., 4., 4., 4.,
       4., 0., 5., 2., 1., 4., 4., 4., 4., 4., 0., 1., 4., 3., 3., 2., 0.,
       4., 5., 3., 3., 5., 4., 2., 2., 5., 2., 2., 4., 4., 3., 3., 5., 2.,
       5., 3., 2., 1., 2., 3., 2., 4., 2., 0., 3., 4., 0., 5., 4., 2., 3.,
       3., 2., 3., 5., 3., 5., 1., 2., 0., 5., 5., 4., 2., 2.])
y_pred_imagenet = np.array([4., 5., 2., 2., 5., 4., 0., 2., 0., 4., 2., 5., 5., 2., 4., 5., 2.,
       1., 5., 4., 2., 5., 4., 1., 5., 0., 2., 4., 0., 3., 0., 1., 0., 3.,
       4., 3., 3., 5., 4., 5., 5., 2., 5., 0., 3., 2., 2., 4., 2., 2., 3.,
       1., 5., 2., 4., 4., 2., 2., 1., 4., 2., 2., 5., 4., 0., 0., 5., 0.,
       4., 4., 0., 2., 4., 3., 2., 1., 2., 5., 5., 1., 5., 2., 5., 0., 3.,
       3., 2., 4., 0., 5., 5., 5., 2., 3., 5., 3., 2., 5., 3., 2., 0., 0.,
       2., 5., 5., 1., 2., 5., 5., 4., 4., 2., 0., 2., 1., 1., 2., 0., 1.,
       5., 0., 1., 3., 4., 1., 2., 3., 2., 5., 2., 5., 3., 4., 2., 3., 3.,
       4., 0., 4., 2., 2., 5., 5., 5., 0., 2., 0., 1., 2., 2., 4., 5., 0.,
       2., 2., 5., 5., 3., 5., 2., 2., 1., 3., 2., 3., 2., 2., 0., 0., 5.,
       1., 0., 2., 3., 3., 1., 2., 0., 3., 2., 2., 2., 3., 1., 4., 4., 5.,
       0., 4., 1., 3., 0., 4., 1., 0., 4., 4., 1., 4., 5., 3., 3., 2., 5.,
       2., 2., 4., 2., 0., 0., 0., 3., 4., 2., 3., 0., 3., 0., 4., 0., 5.,
       0., 3., 4., 2., 2., 3., 5., 3., 0., 2., 0., 5., 2., 5., 0., 5., 0.,
       5., 5., 3., 4., 3., 2., 4., 3., 4., 2., 0., 3., 0., 3., 2., 2., 5.,
       4., 2., 4., 5., 0., 4., 5., 5., 5., 2., 2., 3., 1., 3., 0., 2., 1.,
       3., 4., 1., 4., 3., 1., 1., 3., 4., 0., 0., 2., 0., 0., 0., 4., 3.,
       3., 2., 0., 5., 3., 3., 3., 4., 0., 1., 1., 0., 1., 5., 3., 0., 1.,
       3., 0., 2., 1., 2., 2., 5., 4., 3., 1., 4., 0., 5., 4., 2., 3., 2.,
       3., 2., 0., 2., 2., 5., 4., 5., 4., 2., 5., 4., 0., 4., 3., 2., 4.,
       0., 5., 3., 4., 2., 3., 4., 5., 4., 2., 0., 5., 1., 1., 4., 2., 4.,
       5., 2., 2., 4., 5., 0., 2., 4., 4., 3., 4., 2., 2., 1., 3., 1., 3.,
       2., 4., 5., 4., 5., 2., 5., 4., 2., 3., 0., 5., 0., 3., 2., 1., 3.,
       4., 0., 4., 2., 1., 5., 0., 0., 4., 2., 5., 1., 5., 0., 5., 1., 2.,
       0., 0., 5., 0., 3., 0., 4., 4., 0., 5., 1., 2., 0., 0., 0., 4., 3.,
       1., 1., 4., 5., 2., 5., 5., 1., 1., 5., 2., 2., 2., 0., 4., 5., 0.,
       5., 5., 0., 5., 5., 4., 0., 0., 0., 1., 3., 1., 5., 3., 5., 5., 2.,
       0., 2., 2., 5., 2., 1., 1., 3., 2., 1., 2., 3., 1., 0., 1., 1., 2.,
       1., 3., 1., 3., 0., 2., 2., 4., 3., 0., 0., 2., 5., 5., 3., 5., 0.,
       2., 0., 5., 1., 4., 5., 2., 5., 4., 1., 5., 4., 2., 3., 3., 0., 3.,
       0., 2., 4., 0., 5., 3., 2., 3., 4., 1., 3., 2., 2., 1., 2., 0., 5.,
       0., 5., 0., 1., 2., 3., 5., 1., 1., 0., 2., 2., 1., 2., 4., 1., 2.,
       4., 0., 5., 2., 1., 2., 4., 0., 4., 4., 0., 2., 4., 3., 3., 2., 0.,
       0., 5., 3., 2., 3., 4., 3., 3., 2., 3., 2., 4., 2., 3., 0., 5., 2.,
       5., 0., 2., 5., 2., 3., 2., 0., 2., 4., 3., 3., 2., 5., 2., 2., 0.,
       5., 1., 5., 5., 3., 2., 1., 2., 0., 5., 0., 0., 2., 4.])
y_pred_deepemo = np.array([4., 5., 2., 2., 5., 4., 1., 5., 0., 4., 2., 0., 5., 2., 4., 5., 2.,
       1., 5., 4., 5., 5., 4., 3., 5., 4., 2., 4., 3., 3., 0., 1., 4., 3.,
       4., 3., 3., 5., 4., 5., 4., 2., 5., 3., 3., 2., 2., 0., 2., 2., 3.,
       1., 5., 2., 4., 2., 2., 2., 1., 4., 2., 2., 5., 4., 3., 0., 2., 0.,
       4., 4., 0., 2., 4., 5., 2., 4., 2., 5., 5., 1., 5., 4., 4., 0., 3.,
       0., 2., 4., 0., 3., 5., 5., 2., 2., 5., 3., 2., 5., 4., 2., 0., 0.,
       2., 4., 2., 3., 2., 2., 5., 2., 4., 2., 0., 2., 4., 3., 2., 0., 1.,
       5., 0., 1., 3., 4., 5., 2., 3., 2., 5., 2., 5., 3., 4., 2., 3., 3.,
       4., 0., 4., 2., 2., 2., 3., 5., 0., 2., 0., 1., 2., 2., 4., 3., 0.,
       2., 2., 5., 2., 3., 5., 2., 3., 0., 3., 2., 4., 4., 2., 0., 0., 3.,
       1., 4., 2., 3., 1., 1., 2., 0., 2., 2., 2., 2., 0., 2., 4., 4., 2.,
       0., 4., 1., 3., 0., 4., 1., 0., 1., 4., 3., 2., 3., 3., 5., 2., 3.,
       3., 2., 4., 2., 0., 0., 0., 3., 4., 2., 5., 4., 3., 0., 0., 0., 5.,
       0., 3., 4., 2., 2., 5., 2., 3., 0., 2., 2., 5., 2., 5., 0., 5., 4.,
       5., 5., 3., 4., 4., 2., 0., 4., 4., 2., 0., 3., 0., 3., 2., 2., 5.,
       4., 2., 4., 5., 0., 4., 5., 5., 5., 2., 5., 3., 1., 3., 0., 2., 5.,
       3., 4., 1., 4., 0., 1., 1., 3., 4., 0., 0., 2., 0., 0., 4., 5., 3.,
       2., 2., 2., 5., 3., 5., 3., 4., 0., 1., 1., 0., 1., 5., 4., 0., 5.,
       4., 0., 4., 5., 2., 2., 5., 4., 3., 5., 4., 0., 5., 4., 2., 3., 2.,
       3., 2., 0., 2., 2., 5., 4., 2., 4., 2., 3., 4., 0., 4., 3., 2., 4.,
       0., 5., 3., 4., 2., 3., 4., 5., 2., 2., 4., 4., 1., 5., 4., 2., 2.,
       5., 2., 2., 4., 5., 0., 2., 2., 1., 1., 4., 2., 2., 1., 3., 1., 5.,
       2., 4., 1., 3., 5., 2., 2., 4., 2., 3., 0., 2., 4., 3., 5., 1., 3.,
       4., 0., 0., 2., 1., 5., 0., 0., 4., 2., 2., 1., 5., 0., 4., 5., 2.,
       0., 5., 3., 0., 3., 0., 4., 4., 0., 5., 0., 2., 0., 0., 3., 4., 3.,
       0., 1., 5., 2., 2., 5., 5., 1., 1., 3., 4., 2., 2., 5., 4., 5., 0.,
       5., 5., 0., 5., 5., 4., 5., 0., 4., 1., 3., 1., 5., 4., 5., 5., 4.,
       0., 2., 2., 5., 2., 1., 1., 5., 2., 1., 2., 2., 1., 0., 1., 1., 2.,
       1., 4., 0., 3., 0., 2., 2., 2., 3., 0., 0., 2., 1., 5., 3., 3., 0.,
       2., 0., 5., 1., 2., 5., 2., 1., 4., 4., 5., 4., 2., 3., 3., 0., 0.,
       0., 4., 4., 0., 5., 3., 2., 3., 4., 2., 3., 2., 4., 1., 2., 0., 0.,
       0., 5., 0., 5., 2., 3., 5., 1., 1., 2., 3., 2., 5., 2., 5., 1., 2.,
       4., 0., 5., 2., 1., 2., 4., 0., 4., 4., 0., 2., 4., 3., 3., 2., 0.,
       5., 3., 3., 2., 5., 4., 3., 3., 2., 2., 2., 4., 2., 3., 0., 5., 2.,
       5., 3., 2., 5., 2., 3., 2., 0., 2., 0., 3., 3., 2., 5., 2., 2., 3.,
       3., 1., 3., 5., 3., 2., 5., 2., 0., 5., 5., 4., 2., 4.])

def load_logs():
    """Load training logs for all models."""
    curriculum = pd.read_csv('../data/logs/curriculum_logs.csv')
    deep_emotion = pd.read_csv('../data/logs/deepemo_logs.csv')
    imagenet = pd.read_csv('../data/logs/imagenet_logs.csv')
    return curriculum, deep_emotion, imagenet

def val_acc_plots(tups):
    """Plots validation losses and accuracies.

    Args:
      Tups (list): A list of namedtuples. Each namedtuple
      should have 3 fields: log, method, and color.

    Returns:
      2 Matplotlib subplots.
    """
    fig, ax = plt.subplots(1, 2, figsize=(20, 10))

    for tup in tups:

        fig.suptitle('Validation Losses & Accuracies Across Models', font_properties=header_font, size=30)

        ax[0].set_facecolor('w')
        ax[0].plot(tup.log['val_loss'], label=tup.method, color=tup.color)
        ax[0].set_yticks(np.round(np.arange(0, 2, .2), 1))
        ax[0].set_yticklabels(ax[0].get_yticks(), font_properties=text_font, size=16)
        ax[0].set_xticks(range(0, 75, 10))
        ax[0].set_xticklabels(ax[0].get_xticks(), font_properties=text_font, size=16)
        ax[0].set_xlabel('Epochs', font_properties=text_font, size = 25, labelpad=30)
        ax[0].set_ylabel('Loss', font_properties=text_font, size = 25, labelpad=20)
        ax[0].legend(prop=legend_font)


        ax[1].plot(tup.log['val_acc'], label=tup.method, color=tup.color)
        ax[1].set_yticks(np.round(np.arange(0, 1.2, .2), 1))
        ax[1].set_yticklabels(ax[0].get_yticks(), font_properties=text_font, size=16)
        ax[1].set_xticks(range(0, 75, 10))
        ax[1].set_xticklabels(ax[0].get_xticks(), font_properties=text_font, size=16)
        ax[1].set_xlabel('Epochs', font_properties=text_font, size = 25, labelpad=30)
        ax[1].set_ylabel('Accuracy', font_properties=text_font, size = 25, labelpad=20)
        ax[1].legend(prop=legend_font)

def confusion_heatmap(y_test, preds, groups):
    """Generates a custom confusion matrix.

    Code adapted from: https://stackoverflow.com/questions/35572000/how-can-i-plot-a-confusion-matrix

    Args:
        y_test, preds (arr): Array of numeric values. Length of y_test should equal preds.
        groups (list): Names of groups in y_test/preds.
    Returns:
        A Seaborn heatmap representing a scikit-learn confusion matrix.
    """
    array = confusion_matrix(y_test, preds)
    df_cm = pd.DataFrame(array, index = [i for i in groups],
                         columns = [i for i in groups]
                        )
    fig, ax = plt.subplots(figsize = (25,25))

    color_map = sns.light_palette('#637b7f', n_colors = 50)
    fig.suptitle('')
    ax = sns.heatmap(df_cm/df_cm.sum(axis=0),
                     annot=array,
                     cmap = color_map,
                     fmt = 'g',
                     vmin = 0,
                     vmax = 1,
                     annot_kws = {'font_properties':text_font, 'fontsize':35}
                    )
    ax.set_xlabel('Actual Emotion',
                  font_properties = text_font,
                  size = 40,
                  labelpad = 50
                 )
    ax.set_xticklabels(df_cm.columns,
                       font_properties = header_font,
                       size = 35
                      )
    ax.set_ylabel('Predicted Emotion',
                  font_properties = header_font,
                  size = 40,
                  labelpad = 50
                 )
    ax.set_yticklabels(df_cm.index,
                       font_properties = text_font,
                       size = 35
                      )
    cbar = ax.collections[0].colorbar
    cbar.ax.set_yticklabels([str(np.round(i*100, 2))+'%' for i in np.arange(0, 1.2, .2)],
                            font_properties = text_font,
                            size = 30
                           );

